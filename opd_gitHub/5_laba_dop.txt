org 0x0020

ld #0
out 0xC

INPUT_LOOP:
	in 7
	and #0x40
	beq INPUT_LOOP
	in 6
	swab
	st first_part

INPUT_LOOP2:
	in 7
	and #0x40
	beq INPUT_LOOP2
	in 6
	add first_part
	st input_seconds
	
	
CALCULATE:
	call MOD_3600
	st ans_hours
	ld temp_ost
	call MOD_60
	st ans_minuts
	ld temp_ost1
	st ans_seconds


PRINT_HOURS:
	ld ans_hours
	beq PRINT_MIN
	add const_char
	out 0xC
	ld #0x68
	out 0xC
	ld #0x3A
	out 0xC
	

PRINT_MIN:
	ld ans_minuts
	beq PRINT_SEC
	cmp const_10
	bpl DD_MIN
	add const_char
	out 0xC
	ld #0x6D
	out 0xC
	ld #0x3A
	out 0xC
	jump PRINT_SEC

DD_MIN:
	ld ans_minuts
	call MOD_10
	add const_char
	out 0xC
	ld temp_ost2
	add const_char
	out 0xC
	ld #0x6D
	out 0xC
	ld #0x3A
	out 0xC


PRINT_SEC:
	ld ans_seconds
	cmp const_10
	bpl DD_SEC
	add const_char
	out 0xC
	ld #0x73
	out 0xC
	hlt


DD_SEC:
	ld #0x0
	sub #0x1
	st counter
	ld ans_seconds
	call MOD_10
	add const_char
	out 0xC
	ld temp_ost2
	add const_char
	out 0xC
	ld #0x73
	out 0xC
	hlt
	

MOD_10:
	st temp_ost2
	or (counter)+
	ld temp_ost2
	sub const_10
	bpl MOD_10
	ld temp_ost2
	st global_ost
	ld counter
	ret
	temp_ost2: word 0x0000
	counter: word 0xFFFF
	

MOD_3600:
	st temp_ost
	or (hours_counter)+
	ld temp_ost
	sub const_3600
	bpl MOD_3600
	ld hours_counter
	st global_ost
	ret
	temp_ost: word 0x0000
	hours_counter: word 0xFFFF

MOD_60:
	st temp_ost1
	or (min_counter)+
	ld temp_ost1
	sub const_60
	bpl MOD_60
	ld temp_ost1
	st global_ost
	ld min_counter
	ret
	temp_ost1: word 0x0000
	min_counter: word 0xFFFF




const_char: word 0x0030
const_10: word 0x000A
const_60: word 0x003C
const_3600: word 0x0E10
global_ost: word 0x0000
input_seconds: word 0x0000
first_part: word 0x0000
ans_seconds: word 0x0000
ans_minuts: word 0x0000
ans_hours: word 0x0000